C++右值引用出现的地方比较多。

1、面试官喜欢问，只要说到C++11新特性，都会扯到右值引用。

2、在讲引用和指针的区别的时候，也可以拉出来。


************

### 右值引用至少解决了这两个问题：

- 实现move语义

- 完美转发(Perfect forwarding)

> 在c语言发展的较早时期，左值和右值的定义是这样的：左值是一个可以出现在赋值运算符的左边或者右边的表达式e，而右值则是只能出现在右边的表达式。


```C++
int a = 42;                                                
int b = 43;                                                

// a与b都是左值                              
a = b; // ok                                                
b = a; // ok                                                
a = a * b; // ok                                            

// a * b是右值:                                      
int c = a * b; // ok, 右值在等号右边
a * b = 42; // 错误，右值在等号左边
```

**************

**左值是一个指向某内存空间的表达式，并且我们可以用&操作符获得该内存空间的地址。右值就是非左值的表达式**

```C++

// 左值:                                                        
//                                                                
int i = 42;                                                        
i = 43; // ok, i是左值
int* p = &i; // ok, i是左值
int& foo();                                                        
foo() = 42; // ok, foo()是左值
int* p1 = &foo(); // ok, foo()是左值

// 右值:                                                        
//                                                                
int foobar();                                                      
int j = 0;                                                        
j = foobar(); // ok, foobar()是右值
int* p2 = &foobar(); // 错误，不能取右值的地址
j = 42; // ok, 42是右值

```

## 右值引用




1 右值引用作用

为了支持移动操作（包括移动构造函数和移动赋值函数），C++才引入了一种新的引用类型——右值引用，可以自由接管右值引用的对象内容。

 

2 右值引用绑定的对象

返回非引用类型的函数，产生右值的表达式（算术表达式、关系表达式、位、后置递增递减）
 
3 和左值引用的区别

绑定的对象（引用的对象）不同，左值引用绑定的是返回左值引用的函数、赋值、下标、解引用、前置递增递减
左值持久，右值短暂，右值只能绑定到临时对象，所引用的对象将要销毁或该对象没有其他用户
使用右值引用的代码可以自由的接管所引用对象的内容



清单3：右值引用变量也是左值
```
int&&temp =0;
int&&i = temp;
 
 //temp是一个右值引用变量，变量是左值，因此i引用temp左值是非法的！
 ```
 
 
 
 清单4：右值引用赋值右值引用
 ```
 int &&temp = 0;
 int &&i = 1;
 i = temp;
 
 //清单4是合法的，取出temp所引用临时对象的值，再赋值给i所引用临时对象的值。
 ```



<br><br>

## 总结：

右值引用，是对临时对象的一种引用，它是在初始化时完成引用的，但是右值引用不代表引用临时对象后就不能改变右值引用所引用对象的值，仍然可以在初始化后改变临时对象的值。


对于引用类型，可以用于它所引用对象类型的可以用的地方（把它当成普通变量），只不过用到的值是它所引用的对象的值，它还可以用于移动构造或赋值函数的地方。





************

如果X是一种类型，那么X&&就叫做X的右值引用。为了更好的区分两，普通引用现在被称为左值引用。

右值引用和左值引用的行为差不多，但是有几点不同，最重要的就是函数重载时左值使用左值引用的版本，右值使用右值引用的版本：


```

void foo(X& x); // 左值引用重载
void foo(X&& x); // 右值引用重载

X x;
X foobar();

foo(x); // 参数是左值，调用foo(X&)
foo(foobar()); // 参数是右值，调用foo(X&&)

```

> 右值引用允许函数在编译期根据参数是左值还是右值来建立分支。







